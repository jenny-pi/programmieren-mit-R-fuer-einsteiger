werte <- c(82, 146, 202, 258, 206, 335, 137, 169, 99, 190,
67, 96, 196, 141, 104, 345, 125, 35, 159, 85,
125, 161, 87, 149, 130, 46, 64, 105, 140, 199,
128, 205, 228, 85, 140, 166, 73, 123, 62, 270)
# A1 ----
# Ermittle statistische Maßzahlen für 'werte' in einem Vektor in der Reihenfolge:
# arithmetischer Mittelwert, Standardabweichung, Median, Minimum, 70-Perzentil*
# *: 30% von 'werte' sind größer als dieser Wert
# t1_start # hier drunter schreiben
stats <- c(mean(werte), sd(werte), median(werte), min(werte), quantile(werte, probs = 0.7))
# t1_ende
# A2 ----
# Sortiere 'werte' absteigend.
werte_sortiert <- sort(werte, decreasing = TRUE)
# A3 ----
# Was ist der Mittelwert und der Median, wenn der vierte Wert 658 statt 258 wäre?
# Pro Tipp: Die Funktion replace() kann hier Code sparen
# 'werte' selbst darf natürlich nicht verändert werden: die Originaldaten sollen
# in der Realität normalerweise erhalten bleiben.
w_anders_mittel <- mean(replace(werte, 4, 658))
w_anders_median <- median(replace(werte, 4, 658))
# Mache weiter in "R14_Statistik_2.R"
# Zwei Vektoren mit einer Auswahl aus dem eingebauten Datensatz 'trees':
# ?trees # für die Doku (alle eingebauten Datensätze haben Metadaten.)
hoehe <- c( 70,  65,  63,   72,   81,   83, 66, 75,   80  , 75,   79,   76,   76)
dicke <- c(8.3, 8.6, 8.8, 10.5, 10.7, 10.8, 11, 11, 11.1, 11.2, 11.3, 11.4, 11.4)
# A4 ----
# Sortiere beide Vektoren in aufsteigender Reihenfolge des ersten ('hoehe').
# 'hoehe' und 'dicke' selbst sollen nicht verändert werden.
# Hinweis: siehe Folie "Sortierungen" (Nr 54)
# Achtung: nutze zur Ermittlung der Höhenreihenfolge nicht die sortierte Version.
hoeheSortiert <- sort(hoehe)
dickeSortiert <- dicke[order(hoehe)]
# (Ca. 95% der Zahlen sind dann zwischen 340 und 360; mu +- 2 sd).
# t5_start
zufallNorm <- rnorm(20, 350, 5)
# t5_ende
# A6 ----
# Erzeuge 600 Zufallszahlen aus der Beta Verteilung mit den Parametern 5 und 30.
# (Das entspricht in binären Versuchen einem rechtsschiefen Anteil von 5/35.)
# t6_start
zufallBeta <- rbeta(600, 5, 30)
# t6_ende
# A7 ----
# Runde die normalverteilten Zufallszahlen auf 2 Nachkommastellen.
zufallNormGerundet <- round(zufallNorm, 2)
source("C:/Users/Lenovo/OpenHPI/Woche 1 - Grundlagen/R22_1.4_Statistik/R14_Statistik_3.R")
codeoceanR::rt_submit()
codeoceanR::rt_create()
