# A4 ----
# Schreibe eine Funktion mit den Argumenten A, B, C
# Sie soll die R Variante von Wahr/Falsch herausgeben:
# Wahr, wenn A und B wahr sind oder C wahr ist, sonst Falsch.
logischeFunktion <- function(A, B, C) {(A & B) | C}
logischeFunktion(FALSE,TRUE,TRUE) # soll TRUE ausgeben
# A5 ----
# Eingebaute (built-in) Datensätze sind dokumentiert, siehe   ?rivers
# Verwende `data` um Datensätze im globalEnv Panel anzuzeigen:
data("rivers")
# Wähle vom eingebauten Vektor 'rivers' alle Werte aus,
# die kleiner/gleich 350 oder größer als 750 sind.
# Die Auftretensreihenfolge ist beizubehalten.
# Auch hier ist Filtering der richtige Ansatz.
kleineGrosseFluesse <- rivers[c(rivers <= 350 | rivers > 750)]
# A6 ----
# Welche Elemente im eingebauten Vektor 'state.area' sind kleiner als 50k?
# (Verlangt sind die Positionen = Stellen = Index)
# Tipp: es gibt einen Grund, warum die Aufgabenstellung "welche" lautet. (Englisch)
state.area
state_index_klein <- which(state.area < 50000)
# A7 ----
# R hat ein eingebautes Objekt `LETTERS` - ein Vektor mit Zeichenketten:
LETTERS # Siehe Doku für mehr eingebaute Sachen.
# Welche der eingebauten Buchstaben `LETTERS` sind nicht gleich "K"?
# Auch hier geht es um einen Vektor der Positionen.
# Nutze den kurzmöglichsten Code (19 Zeichen).
index_ungleich_K <- which(LETTERS != "K")
# A1 ----
zahlen <- c(  5, 14, 13,  9,  3,  2, 10, 12, 11,  6,  7,  8,  1,  4, 15)
gruppe <- c("b","c","d","c","a","d","b","d","b","b","d","c","a","b","a")
# Wähle alle Zahlen aus, die kleiner gleich 9 sind.
# Die Auftretensreihenfolge ist beizubehalten.
# Hinweis: aus Vektoren auswählen haben wir in 1.3 Vektoren gelernt :)
kleineZahlen <- zahlen[zahlen <= 9]
# A2 ----
# Wähle alle Zahlen aus, die zur Gruppe "b" gehören.
# Suchstichwort in den Folien: Filtern
zahlen_b <- zahlen[gruppe == "b"]
# A3 ----
3 < "b" # zeigt, dass R Zahlen als "kleiner" als Buchstaben betrachtet.
# Bringe folgende Einträge in die richtige Reihenfolge (aufsteigend).
# Die Zeileninhalte sollen also gleich bleiben, nur ihre Reihenfolge
# relativ zueinander korrigiert werden.
# Das "kleinste" soll oben stehen, das "größte" unten.
# Tipp: vergleiche jeden Eintrag miteinander, zB prüfe:
3 > "b" # oder verwende eine clevere Herangehensweise :)
# Pro Tipp: ALT Taste gedrückt halten + Pfeil hoch/runter verschiebt Zeile
# t3_start # Lösung unter dieser Zeile behalten
1
"2"
3
"a"
"b"
"B"
# t3_ende
# Mache weiter in "R22_Logik_2.R"
# A8 ----
# Erstelle eine Funktion, die einen Vektor mit Zahlen
# sowie einen Vergleichswert als Eingabe akzeptiert.
# Sie soll einen Vektor mit zwei Booleans ausgeben,
# die folgende Fragen beantworten:
# Sind alle Zahlen > Wert ?  Gibt es irgendwelche Zahlen > Wert ?
alleEinige <- function(z,w) {c(all(z > w), any(z > w))} # Argumentnamen frei änderbar
alleEinige(1:5, 4) # soll FALSE, TRUE ausgeben
# A9 ----
# Erstelle nun eine ähnliche Funktion für die Fragen:
# Wieviele Zahlen sind > Wert ?  Welcher Anteil ist > Wert ?
anzahlAnteil <- function(z,w) {c(sum(z > w), mean(z > w))}
# anzahlAnteil(1:5, 4) # soll 1, 0.2 ausgeben
# A10 ----
# Schreibe eine Funktion, die den zweitgrößten Wert des Inputs ausgibt.
# Bei Mehrfachauftreten eines Wertes gilt hier das zweite Vorkommen als zweitgrößter Wert.
# Hint: schließe den größten Wert aus und berechne das Maximum der verbleibenden Elemente.
zweitesMaximum <- function(x) {max(x[-which.max(x)])}
zweitesMaximum(c(5,3,9,1,7,4,8,6)) # soll 8 ausgeben
zweitesMaximum(c(5,3,9,1,7,4,8,9)) # soll 9 ausgeben
# Mache weiter in "R22_Logik_4.R"
# A11 ----
# Korrigiere folgenden Code, der die absteigend sortierten Werte erstellt.
# Hinweis: im versteckten Testscript wird böser Code ausgeführt.
# Interaktiv läuft der Code unten auch jetzt schon, aber im Test nicht.
# Der eigentliche 'Fehler' liegt also im Testscript, aber der
# nachfolgende Code soll sicherer gestaltet werden.
# PS: wer im Browser arbeitet, muss für die genaue Meldung runter scrollen.
werte <- c(5,9,1,4,3,8)
sortiert <- sort(werte, decreasing=TRUE) ; sortiert
# Wenn du fertig bist, übermittle bitte deinen Punktestand an openHPI mit:
# codeoceanR::rt_sub
source("C:/Users/Lenovo/OpenHPI/Woche 2 - Datentypen/R22_2.2_Logik/R22_Logik_4.R")
codeoceanR::rt_submit()
codeoceanR::rt_create()
