# A1 ----
# Wieviele Zeichen gibt es in 'superkalifragilistischexpialigetisch'?
anzahlZeichen <- nchar("superkalifragilistischexpialigetisch")
# A2 ----
# Schreibe den obigen Spruch von Mary Poppins in Großbuchstaben.
spruchGross <- toupper("superkalifragilistischexpialigetisch")
# A3 ----
# Erhalte die Zeichen der Stellen 10 bis 22.
spruchTeil <- substr("superkalifragilistischexpialigetisch", 10, 22)
# A4 ----
# Erstelle einen Vektor mit "Buchstabe_A", "Buchstabe_B", ... bis "Buchstabe_Z".
# Tipp: Siehe 2.2 Logik A7 :)
buchstaben <- paste("Buchstabe", LETTERS, sep = "_")
# Die Lösungen in diesem Skript sind vom Code her sehr kurz.
# In der Realität würde dafür keine eigene Funktion geschrieben werden.
# Das ermöglicht hier aber eine umfassende Prüfung deiner Lösung :)
# Im (dir unsichtbaren) Testskript werden Funktionen immer mit mehreren Eingaben getestet.
# Solltest du eine Testmeldung nicht nachvollziehen können,
# kopiere das Beispiel und probiere es im Skript selbst mal aus.
# Kommt z.B. die Meldung T5: 'wort_existiert("A", letters)' sollte 'FALSE' sein, nicht 'TRUE',
# kopiere und führe aus:    letters    und dann    wort_existiert("A", letters)
# Verwende innerhalb der Funktion keine Objekte aus dem globalen Environment.
# Siehe Nachtrag unter https://open.hpi.de/courses/programmieren-r2022/question/97cf13bf-5e81-4aa5-bbb3-b2cffa64d549
# A5 ----
# Schreibe eine Funktion, die überprüft, ob 'wort' in 'liste' vorkommt.
wort_existiert <- function(wort, liste) {wort %in% liste}
wort_existiert("rockt", c("R", "rockt", "als", "Programmiersprache") ) # soll TRUE sein
wort_existiert("rockt", c("Andere", "Worte", "ohne", "Felsen") ) # FALSE
# A6 ----
# Welche der 'eingaben' enthalten ein bestimmtes 'muster'? Es sind die Stellen gesucht (Index).
welche_enthalten <- function(muster, eingaben) {grep(muster, eingaben)}
schoko <- c("Milka", "Lindor", "Ritter Sport", "Merci", "Frigor", "Feodora", "Alpia")
welche_enthalten("or", schoko) # 2,3,5,6
# A7 ----
# Gib für jedes Element in 'eingaben' an, ob es 'muster' beinhaltet.
jeweils_enthalten <- function(muster, eingaben) {grepl(muster, eingaben)}
jeweils_enthalten("or", schoko) # FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE
# A8 ----
# Überprüfe, ob 'wort' unabhängig von Groß/Kleinbuchstaben in 'liste' vorkommt.
wort_existiert_case <- function(wort, liste) {tolower(wort) %in% tolower(liste)}
wort_existiert_case("rockt", c("R", "Rockt", "als", "Programmiersprache") ) # TRUE
source("C:/Users/Lenovo/OpenHPI/Woche 2 - Datentypen/R22_2.3_Zeichenketten/R23_Zeichenketten_3.R")
# Die folgenden Aufgaben beziehen sich auf Folien, die in letzter Minute ins
# Zusatzmaterial verschoben wurden. Leider sind die Aufgaben schon von sovielen
# Teilnehmern bearbeitet, dass wir sie jetzt nicht mehr rausnehmen wollen.
# Wenn du diese Aufgaben aus Zeitgründen nicht bearbeiten möchtest, setze im
# Folgenden den Wert auf TRUE.
allePunkte9bis14erhalten <- FALSE
source("C:/Users/Lenovo/OpenHPI/Woche 2 - Datentypen/R22_2.3_Zeichenketten/R23_Zeichenketten_3.R")
# Falls Rstudio das Encoding der Umläute verbockt, bitte unter
# Tools - Global Options - Code - Saving - Default Text Encoding: UTF-8  auswählen
# browseURL("https://bookdown.org/brry/course/settings.html#settings")
# Die folgenden Aufgaben beziehen sich auf Folien, die in letzter Minute ins
# Zusatzmaterial verschoben wurden. Leider sind die Aufgaben schon von sovielen
# Teilnehmern bearbeitet, dass wir sie jetzt nicht mehr rausnehmen wollen.
# Wenn du diese Aufgaben aus Zeitgründen nicht bearbeiten möchtest, setze im
# Folgenden den Wert auf TRUE.
allePunkte9bis14erhalten <- FALSE
# Die Score Meldungen werden trotzdem angezeigt, falls du daran arbeiten möchtest.
# A9 ----
heinz <- c("Getränk","gefällig","?",
"Genialer","Gedanke",".", "Gerade","Gewürzgurke","gegessen",".",
"Glas","Grog","?",
"Gern",".", "Gieß","!","Gieß","!")
# Finde alle Worte aus dem Dialog, die mit 'Ge' oder 'ge' anfangen.
# Für den Test muss die Reihenfolge des Auftretens beibehalten werden.
Gworte <- grep("^ge", heinz, ignore.case = TRUE, value =  TRUE)
# A10 ----
# Finde alle Worte, die mit g enden.
worteG <- grep("g$", heinz, value = TRUE)
# A11 ----
# Schreibe eine Funktion, die alle 'eingaben' ausgibt, die mit 'anfang' beginnen.
# Die 'anfang' Werte enthalten nicht die benötigte Regex-anweisung.
# Pro-Tipp: Wenn dies (oder irgendetwas anderes) schwierig erscheint,
# zeigt eine Online-Suche oft, dass die Lösung kurz sein kann...
anfangende_eingaben <- function(anfang, eingaben) 0
anfangende_eingaben("ab", c("außer", "abc", "nichts", "mit abkürzungen")) # nur 'abc', nicht das letzte
# A12 -----
# Ersetze alle Eingaben zwischen 'viel' und 'Gerede' (inklusive) mit '[...]'
abkuerzen <- function(eingabe) 0
abkuerzen("Lange Zitate mit viel mehr als nötigem Gerede bitte kürzen.")
# soll werden: 'Lange Zitate mit [...] bitte kürzen.'
# Mache weiter in "R23_Zeichenketten_4.R"
source("C:/Users/Lenovo/OpenHPI/Woche 2 - Datentypen/R22_2.3_Zeichenketten/R23_Zeichenketten_3.R")
# Die folgenden Aufgaben beziehen sich auf Folien, die in letzter Minute ins
# Zusatzmaterial verschoben wurden. Leider sind die Aufgaben schon von sovielen
# Teilnehmern bearbeitet, dass wir sie jetzt nicht mehr rausnehmen wollen.
# Wenn du diese Aufgaben aus Zeitgründen nicht bearbeiten möchtest, setze im
# Folgenden den Wert auf TRUE.
allePunkte9bis14erhalten <- TRUE
# Die Score Meldungen werden trotzdem angezeigt, falls du daran arbeiten möchtest.
# A9 ----
heinz <- c("Getränk","gefällig","?",
"Genialer","Gedanke",".", "Gerade","Gewürzgurke","gegessen",".",
"Glas","Grog","?",
"Gern",".", "Gieß","!","Gieß","!")
# Finde alle Worte aus dem Dialog, die mit 'Ge' oder 'ge' anfangen.
# Für den Test muss die Reihenfolge des Auftretens beibehalten werden.
Gworte <- grep("^ge", heinz, ignore.case = TRUE, value =  TRUE)
# A10 ----
# Finde alle Worte, die mit g enden.
worteG <- grep("g$", heinz, value = TRUE)
# A11 ----
# Schreibe eine Funktion, die alle 'eingaben' ausgibt, die mit 'anfang' beginnen.
# Die 'anfang' Werte enthalten nicht die benötigte Regex-anweisung.
# Pro-Tipp: Wenn dies (oder irgendetwas anderes) schwierig erscheint,
# zeigt eine Online-Suche oft, dass die Lösung kurz sein kann...
anfangende_eingaben <- function(anfang, eingaben) 0
anfangende_eingaben("ab", c("außer", "abc", "nichts", "mit abkürzungen")) # nur 'abc', nicht das letzte
# A12 -----
# Ersetze alle Eingaben zwischen 'viel' und 'Gerede' (inklusive) mit '[...]'
abkuerzen <- function(eingabe) 0
abkuerzen("Lange Zitate mit viel mehr als nötigem Gerede bitte kürzen.")
# soll werden: 'Lange Zitate mit [...] bitte kürzen.'
# Mache weiter in "R23_Zeichenketten_4.R"
source("C:/Users/Lenovo/OpenHPI/Woche 2 - Datentypen/R22_2.3_Zeichenketten/R23_Zeichenketten_3.R")
codeoceanR::rt_submit()
codeoceanR::rt_create()
